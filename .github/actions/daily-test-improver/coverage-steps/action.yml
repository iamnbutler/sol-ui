name: "Build and Test Coverage for sol-ui"
description: "Builds the sol-ui Rust project and generates test coverage report"

runs:
  using: "composite"
  steps:
    - name: Check platform compatibility
      shell: bash
      run: |
        echo "::warning::This project requires macOS to build due to Metal framework dependencies"
        echo "Current runner OS: $RUNNER_OS"
        if [ "$RUNNER_OS" != "macOS" ]; then
          echo "::error::sol-ui requires macOS to build. Cannot generate coverage on Linux/Windows."
          echo "PLATFORM_COMPATIBLE=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "PLATFORM_COMPATIBLE=true" >> $GITHUB_OUTPUT
        fi

    - name: Setup Rust toolchain (macOS only)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source $HOME/.cargo/env
        rustup component add llvm-tools-preview
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install coverage tools (macOS only)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # Install cargo-tarpaulin for coverage
        cargo install cargo-tarpaulin || true
        # Install grcov as backup
        cargo install grcov || true

    - name: Create mock test directory
      if: runner.os != 'macOS'
      shell: bash
      run: |
        echo "Creating mock test structure for Linux compatibility"
        mkdir -p tests
        cat > tests/lib.rs << 'EOF'
        // Mock tests for platform compatibility
        #[cfg(test)]
        mod tests {
            #[test]
            fn test_placeholder() {
                // This is a placeholder test that always passes
                // Real tests should be written for macOS platform
                assert_eq!(1, 1);
            }
        }
        EOF
        
        # Create a mock coverage report
        mkdir -p coverage
        cat > coverage/coverage.txt << 'EOF'
        Coverage Report for sol-ui (Mock - requires macOS)
        ===================================================
        
        Note: This is a mock coverage report generated on Linux.
        sol-ui requires macOS to build and test properly due to 
        Metal framework dependencies.
        
        To generate actual coverage:
        1. Run on macOS runner
        2. Use: cargo tarpaulin --out Html --output-dir coverage/
        
        Mock Coverage Summary:
        - Lines covered: 0/100 (0.0%)
        - Functions covered: 0/50 (0.0%)
        - Branches covered: 0/25 (0.0%)
        
        Areas requiring tests (estimated from source analysis):
        - src/app.rs - Application setup and lifecycle
        - src/color.rs - Color utilities and conversions
        - src/element.rs - UI element base functionality
        - src/geometry.rs - Geometric calculations
        - src/layout_engine.rs - Layout computation logic
        - src/layer.rs - Layer management
        - src/render.rs - Rendering pipeline
        - src/style.rs - Styling system
        - src/text_system.rs - Text rendering and layout
        - src/interaction/ - User interaction handling
        - src/platform/mac/ - Platform-specific implementations
        EOF

    - name: Build project (macOS only)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        cargo build --release

    - name: Run tests (macOS only)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        cargo test

    - name: Generate coverage report (macOS only)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # Try tarpaulin first
        mkdir -p coverage
        if cargo tarpaulin --out Html --output-dir coverage/ --skip-clean; then
          echo "Coverage generated with tarpaulin"
        else
          echo "Tarpaulin failed, trying grcov"
          # Fallback to grcov
          export CARGO_INCREMENTAL=0
          export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort"
          export RUSTDOCFLAGS="-Cpanic=abort"
          
          cargo build
          cargo test
          
          grcov . --binary-path ./target/debug/ -s . -t html --branch --ignore-not-existing --ignore "/*" -o coverage/
        fi
        
        # Create a text summary as well
        if command -v grcov >/dev/null 2>&1; then
          grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o coverage/lcov.info || true
        fi

    - name: Upload coverage artifacts
      if: always()
      shell: bash
      run: |
        echo "Coverage report should be in coverage/ directory"
        ls -la coverage/ || echo "No coverage directory found"

    - name: Create coverage summary
      shell: bash
      run: |
        if [ -f coverage/coverage.txt ]; then
          echo "Found mock coverage report"
          cat coverage/coverage.txt
        elif [ -f coverage/tarpaulin-report.html ]; then
          echo "Found tarpaulin HTML report"
          echo "Coverage report generated successfully with tarpaulin"
        elif [ -f coverage/index.html ]; then
          echo "Found grcov HTML report"
          echo "Coverage report generated successfully with grcov"
        else
          echo "No coverage report found"
        fi